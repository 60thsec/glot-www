window.Editor = (function() {

    function initEditor(id) {
        var theme = Settings.getTheme();
        var keybindings = Settings.getKeybindings();

        var editor = ace.edit(id);
        editor.setTheme(theme);
        editor.setKeyboardHandler(keybindings);
        editor.getSession().setMode(#{toJSON $ languageAceMode lang});
        var lineCount = calcLineCount();
        editor.setOptions({
            minLines: lineCount,
            maxLines: lineCount,
        });

        // Resize to flush stale content
        setTimeout(function() {
            editor.resize();
        }, 1);
    }

    function calcLineCount() {
        var editorY = $(".editors").offset().top;
        var browserHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        var lineHeight = 16;
        var bottomMargin = 250;
        var lineCount = (browserHeight - editorY - bottomMargin) / lineHeight;
        return Math.max(lineCount, 10);
    }

    function setTheme(theme) {
        var editorIds = getEditorIds();
        editorIds.forEach(function(id) {
            var editor = ace.edit(id);
            editor.setTheme(theme);
        });
    }

    function setKeybindings(keybindings) {
        var editorIds = getEditorIds();
        editorIds.forEach(function(id) {
            var editor = ace.edit(id);
            editor.setKeyboardHandler(keybindings);
        });
    }

    function setFullWidth(fullWidth) {
        if (fullWidth) {
            $(".container").addClass("full-width");
        } else {
            $(".container").removeClass("full-width");
        }
    }

    function resetEditor(id) {
        var editor = ace.edit(id);
        editor.setValue("");
    }

    function setFiles(files) {
        files.forEach(function(file, i) {
            var editorId = "editor-" + (i + 1);
            initEditor(editorId);
            setValue(editorId, file.content);
            setTabTitle(editorId, file.name);
            showTab(editorId);
        });
    }

    function setValue(id, value) {
        var editor = ace.edit(id);
        editor.setValue(value);
    }

    function setActiveTab(elem) {
        // Ensure only selected tab is contentediable
        $(".filename").removeAttr("contenteditable");
        elem.find(".filename").attr("contenteditable", true);

        // Ensure selected tab is active and visible
        $(".editor-widget li.active").removeClass("active");
        elem.removeClass("hide");
        elem.addClass("active");
    }

    function showTab(id) {
        var selector = ".nav-tabs [data-editor='" + id + "']";
        $(selector).removeClass("hide");
    }

    function setTabTitle(id, title) {
        var selector = ".nav-tabs [data-editor='" + id + "'] .filename";
        $(selector).text(title);
    }

    function closeTab(elem) {
        if (elem.hasClass("active")) {
            var prevTab = elem.prev();
            var prevEditorId = prevTab.data("editor");
            showEditor(prevEditorId);
            setActiveTab(elem.prev());
        }
        elem.addClass("hide");
    }

    function showEditor(id) {
        $(".editors .editor:not(.hide)").addClass("hide");
        $("#" + id).removeClass("hide");
        $("#meta").addClass("hide");
        $("#settings").addClass("hide");
    }

    function showMeta() {
        $(".editors .editor:not(.hide)").addClass("hide");
        $("#meta").removeClass("hide");
        $("#settings").addClass("hide");
    }

    function showSettings() {
        $(".editors .editor:not(.hide)").addClass("hide");
        $("#meta").addClass("hide");
        $("#settings").removeClass("hide");
    }

    function getFiles() {
        var editorIds = getEditorIds();
        var files = editorIds.map(function(id) {
            return {
                name: getFilename(id),
                content: getContent(id),
            };
        });

        // Remove files with no content
        return files.filter(function(file) {
            return file.content.length > 0;
        });
    }

    function getEditorIds() {
        return $(".editors .editor").map(function() {
            return $(this).attr('id');
        }).toArray();
    }

    function getContent(editorId) {
        var editor = getEditor(editorId);
        return editor.getValue();
    }

    function getFilename(editorId) {
        var selector = '.nav-tabs [data-editor="' + editorId + '"] .filename';
        return $(selector).text();
    }

    function getEditor(editorId) {
        return ace.edit(editorId);
    }

    return {
        initEditor: initEditor,
        resetEditor: resetEditor,
        setFiles: setFiles,
        setActiveTab: setActiveTab,
        closeTab: closeTab,
        showEditor: showEditor,
        showMeta: showMeta,
        showSettings: showSettings,
        setTheme: setTheme,
        setKeybindings: setKeybindings,
        setFullWidth: setFullWidth,
        getFiles: getFiles,
    };

})();

window.Fork = (function() {
    function hasFiles() {
        if (localStorage.forkedFiles) {
            return true;
        }
        return false;
    }

    function setFiles(files) {
        localStorage.forkedFiles = JSON.stringify(files);
    }

    function getFiles() {
        if (!hasFiles()) {
            return null;
        }

        var files = JSON.parse(localStorage.forkedFiles);
        delete localStorage.forkedFiles;
        return files;
    }

    return {
        hasFiles: hasFiles,
        setFiles: setFiles,
        getFiles: getFiles,
    };
})();

// Handle editor tab clicks
(function() {
    // Handle editor tab clicks
    $(document).on("click", ".nav-tabs [data-editor]", function(e) {
        var tab = $(e.target).closest("li");
        var editorId = tab.data("editor");
        Editor.showEditor(editorId);
        Editor.setActiveTab(tab);
    });

    // Handle meta tab clicks
    $(document).on("click", ".nav-tabs .meta", function(e) {
        var tab = $(e.target).closest("li");
        Editor.setActiveTab(tab);
        Editor.showMeta();
    });


    // Handle settings tab clicks
    $(document).on("click", ".nav-tabs .settings", function(e) {
        var tab = $(e.target).closest("li");
        Editor.setActiveTab(tab);
        Editor.showSettings();
    });

    // Handle new file clicks
    $(document).on("click", ".new-file", function(e) {
        e.preventDefault();

        var tab = $("[data-editor].hide").first();
        if (tab.length === 0) {
            return;
        }

        var editorId = tab.data("editor");
        Editor.initEditor(editorId);
        Editor.showEditor(editorId);
        Editor.setActiveTab(tab);
    });

    // Handle close file clicks
    $(document).on("click", ".close-file", function(e) {
        e.stopPropagation();

        if (!confirm("Are you sure you want to delete this file?")) {
            return;
        }

        var tab = $(e.target).parents("li[data-editor]");
        var editorId = tab.data("editor");
        Editor.resetEditor(editorId);
        Editor.closeTab(tab);
    });

    // Prevent default on # href's
    $(document).on("click", '.nav-tabs a[href="#"]', function(e) {
        e.preventDefault();
    });

    if (Fork.hasFiles()) {
        // Initialize editors with forked files
        var files = Fork.getFiles();
        Editor.setFiles(files);
    } else {
        // Initialize editors with default content
        // Additional editors are loaded when a new file is added
        var fileCount = #{toJSON $ length $ snippetFiles snippet};
        for (var i = 1; i <= fileCount; i++) {
            Editor.initEditor("editor-" + i);
        }
    }

    Editor.setFullWidth(Settings.getFullWidth());
})();
