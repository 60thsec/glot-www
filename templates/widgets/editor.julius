window.Editor = (function() {

    function initEditor(id) {
        var editor = ace.edit(id);
        editor.setTheme("ace/theme/monokai");
        editor.getSession().setMode(#{toJSON $ languageAceMode lang});
        editor.setOptions({
            minLines: 32,
            maxLines: 8192,
        });

        // Resize to flush stale content
        setTimeout(function() {
            editor.resize();
        }, 1);
    }

    function resetEditor(id) {
        var editor = ace.edit(id);
        editor.setValue("");
    }

    function setActiveTab(elem) {
        // Ensure only selected tab is contentediable
        $(".filename").removeAttr("contenteditable");
        elem.find(".filename").attr("contenteditable", true);

        // Ensure selected tab is active and visible
        $(".editor-widget li.active").removeClass("active");
        elem.removeClass("hide");
        elem.addClass("active");
    }

    function closeTab(elem) {
        if (elem.hasClass("active")) {
            var prevTab = elem.prev();
            var prevEditorId = prevTab.data("editor");
            showEditor(prevEditorId);
            setActiveTab(elem.prev());
        }
        elem.addClass("hide");
    }

    function showEditor(id) {
        $(".editors .editor:not(.hide)").addClass("hide");
        $("#" + id).removeClass("hide");
    }

    function getFiles() {
        var editorIds = getEditorIds();
        var files = editorIds.map(function(id) {
            return {
                name: getFilename(id),
                content: getContent(id),
            };
        });

        // Remove files with no content
        return files.filter(function(file) {
            return file.content.length > 0;
        });
    }

    function getEditorIds() {
        return $(".editors .editor").map(function() {
            return $(this).attr('id');
        }).toArray();
    }

    function getContent(editorId) {
        var editor = getEditor(editorId);
        return editor.getValue();
    }

    function getFilename(editorId) {
        var selector = '.nav-tabs [data-editor="' + editorId + '"] .filename';
        return $(selector).text();
    }

    function getEditor(editorId) {
        return ace.edit(editorId);
    }

    return {
        initEditor: initEditor,
        resetEditor: resetEditor,
        setActiveTab: setActiveTab,
        closeTab: closeTab,
        showEditor: showEditor,
        getFiles: getFiles,
    };

})();

(function() {
    // Handle editor tab clicks
    $(document).on("click", ".nav-tabs [data-editor]", function(e) {
        var tab = $(e.target).closest("li");
        var editorId = tab.data("editor");
        Editor.showEditor(editorId);
        Editor.setActiveTab(tab);
    });

    // Handle new file clicks
    $(document).on("click", ".new-file", function(e) {
        e.preventDefault();

        var tab = $("[data-editor].hide").first();
        if (tab.length === 0) {
            return;
        }

        var editorId = tab.data("editor");
        Editor.initEditor(editorId);
        Editor.showEditor(editorId);
        Editor.setActiveTab(tab);
    });

    $(document).on("click", ".close-file", function(e) {
        e.stopPropagation();

        var tab = $(e.target).parents("li[data-editor]");
        var editorId = tab.data("editor");
        Editor.resetEditor(editorId);
        Editor.closeTab(tab);
    });

    // Initialize editors, 1 per file
    // Additional editors are loaded when a new file is added
    var fileCount = #{toJSON $ length $ snippetFiles snippet};
    for (var i = 1; i <= fileCount; i++) {
        Editor.initEditor("editor-" + i);
    }
})();
